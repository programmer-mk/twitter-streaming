//package streaming
//
//import org.apache.spark.SparkConf
//import org.apache.spark.sql.SparkSession
//import org.apache.spark.streaming.{Seconds, StreamingContext}
//
//
//object TweetStreaming {
//
//  def updateFunction(newValues: Seq[Int], state: Option[Int]): Option[Int] = {
//    val newState = state.getOrElse(0) + newValues.sum
//    Some(newState)
//  }
//
//  def main(args: Array[String]): Unit = {
//    // Create the context with a 1 second batch size
//    val sparkConf = new SparkConf().setAppName("CustomReceiver").setMaster("local[2]").set("spark.executor.memory","1g");
//    val ssc = new StreamingContext(sparkConf, Seconds(5))
//    ssc.checkpoint("/tmp/spark_checkpoint")
//
//    // Create an input stream with the custom receiver on target ip:port and count the
//    // words in input stream of \n delimited text (e.g. generated by 'nc')
//    val lines = ssc.receiverStream(new CustomReceiver("localhost", 9999))
//    val words = lines.flatMap(_.split(" "))
//    val pairs = words.map(word => (word, 1))
//    val stateWords = pairs.updateStateByKey[Int](updateFunction(_,_))
//    val reduced = stateWords.reduceByKey(_ + _)
//    //reduced.print()
//    reduced.foreachRDD { rdd =>
//      val spark = SparkSession.builder.config(rdd.sparkContext.getConf).getOrCreate()
//      import spark.implicits._
//
//      val words = rdd.toDF("word", "count")
//
//      // Create a temporary view
//      words.createOrReplaceTempView("words")
//      val wordCountsDataFrame =
//        spark.sql("select word, count from words")
//      wordCountsDataFrame.show()
//    }
//
//    ssc.start()
//    ssc.awaitTermination()
//  }
//}
//
//
//
