AWSTemplateFormatVersion: "2010-09-09"
Description: deploy all containers to ecs
Parameters:
  SubnetID:
    Type: String
  Name:
    Type: String
  Environment:
    Type: String
  Domain:
    Type: String
  Vpc:
    Type: String
  KafkaReplicationFactor:
    Type: String
  TweetProducerEcrImage:
    Type: String
  SparkStreamingAppEcrImage:
    Type: String
Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${Name}-${Environment}-cluster"
  ZookeperLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: zookeper-log-group
  KafkaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: kafka-log-group
  TweetProducerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: tweet-producer-log-group
  SparkMasterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: spark-master-log-group
  SparkWorkerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: spark-worker-log-group
  MySQLLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: mysql-log-group
  GrafanaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: grafana-log-group
  SparkStreamingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: spark-streaming-log-group
  CollectorsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: collectors-execution-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  ProcessorsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: processors-execution-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  ZookeperServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: zookeper-service-sg
      GroupDescription: Security group for zookeper tasks
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2181
          ToPort: 2181
          CidrIp: 0.0.0.0/0
  KafkaServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: kafka-service-sg
      GroupDescription: Security group for kafka tasks
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          CidrIp: 0.0.0.0/0
  TweetProducerServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: tweet-producer-service-sg
      GroupDescription: Security group for tweet producer tasks
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
  SparkMasterServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: spark-master-service-sg
      GroupDescription: Security group for spark master tasks
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 7077
          ToPort: 7077
          CidrIp: 0.0.0.0/0
  SparkWorkerServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: spark-worker-service-sg
      GroupDescription: Security group for spark worker tasks
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8081
          ToPort: 8081
          CidrIp: 0.0.0.0/0
  VisualisationsServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: visualisations-service-sg
      GroupDescription: Security group for visualisations service - mysql and grafana
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
  ZookeperTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - CollectorsExecutionRole
      - ZookeperLogGroup
    Properties:
      Family: zookeper-td
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref CollectorsExecutionRole
      ContainerDefinitions:
        - Name: zookeper-container
          Image: docker.io/bitnami/zookeeper:3.7
          PortMappings:
            - ContainerPort: 2181
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref ZookeperLogGroup
              awslogs-stream-prefix: ecs
          Environment:
            - Name: ALLOW_ANONYMOUS_LOGIN
              Value: yes
      RequiresCompatibilities:
        - FARGATE

  KafkaTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - CollectorsExecutionRole
      - KafkaLogGroup
    Properties:
      Family: kafka-td
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref CollectorsExecutionRole
      ContainerDefinitions:
        - Name: kafka-container
          Image: docker.io/bitnami/kafka:3
          PortMappings:
            - ContainerPort: 9092
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref KafkaLogGroup
              awslogs-stream-prefix: ecs
          Environment:
            - Name: KAFKA_CFG_ZOOKEEPER_CONNECT
              Value: !Sub "zookeper.${Domain}:2181"
            - Name: ALLOW_PLAINTEXT_LISTENER
              Value: yes
            - Name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
              Value: true
            - Name: KAFKA_CFG_NUM_PARTITIONS
              Value: !Ref KafkaReplicationFactor
            - Name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
              Value: !Ref KafkaReplicationFactor
            - Name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              Value: !Ref KafkaReplicationFactor
      RequiresCompatibilities:
        - FARGATE

  TweetProducerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - CollectorsExecutionRole
      - TweetProducerLogGroup
    Properties:
      Family: tweet-producer-td
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref CollectorsExecutionRole
      ContainerDefinitions:
        - Name: tweet-producer-container
          Image: !Ref TweetProducerEcrImage
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref TweetProducerLogGroup
              awslogs-stream-prefix: ecs
          Environment:
            - Name: KAFKA_SERVICE
              Value: !Sub "kafka.${Domain}:9092"
      RequiresCompatibilities:
        - FARGATE

  PrivateNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Ref Domain
      Vpc: !Ref Vpc
  ZookeperDiscoveryService:
    DependsOn: PrivateNamespace
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for zookeper
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: zookeper
      NamespaceId: !Ref PrivateNamespace
  KafkaDiscoveryService:
    DependsOn: PrivateNamespace
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for kafka
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: kafka
      NamespaceId: !Ref PrivateNamespace
  ZookeperService:
    DependsOn:
      - PrivateNamespace
      - ZookeperDiscoveryService
      - Cluster
      - ZookeperTaskDefinition
      - ZookeperServiceSecurityGroup
    Type: AWS::ECS::Service
    Properties:
      ServiceName: zookeper
      Cluster: !Ref Cluster
      TaskDefinition: !Ref ZookeperTaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt ZookeperDiscoveryService.Arn
          Port: 2181
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetID
          SecurityGroups:
            - !GetAtt ZookeperServiceSecurityGroup.GroupId
  KafkaService:
    DependsOn:
      - ZookeperService
      - PrivateNamespace
      - KafkaDiscoveryService
      - Cluster
      - KafkaTaskDefinition
      - KafkaServiceSecurityGroup
    Type: AWS::ECS::Service
    Properties:
      ServiceName: kafka
      Cluster: !Ref Cluster
      TaskDefinition: !Ref KafkaTaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt KafkaDiscoveryService.Arn
          Port: 9092
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetID
          SecurityGroups:
            - !GetAtt KafkaServiceSecurityGroup.GroupId
  TweetProducerService:
    DependsOn:
      - KafkaService
      - Cluster
      - TweetProducerTaskDefinition
      - TweetProducerServiceSecurityGroup
    Type: AWS::ECS::Service
    Properties:
      ServiceName: tweet-producer
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TweetProducerTaskDefinition
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetID
          SecurityGroups:
            - !GetAtt TweetProducerServiceSecurityGroup.GroupId
  SparkMasterTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - ProcessorsExecutionRole
      - SparkMasterLogGroup
      - VisualisationsService
    Properties:
      Family: spark-master-td
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ProcessorsExecutionRole
      ContainerDefinitions:
        - Name: spark-master-container
          Image: bde2020/spark-master:3.1.1-hadoop3.2
          PortMappings:
            - ContainerPort: 7077
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref SparkMasterLogGroup
              awslogs-stream-prefix: ecs
          Environment:
            - Name: INIT_DAEMON_STEP
              Value: setup_spark
            - Name: MYSQL_SERVICE
              Value: !Sub "visualisations.${Domain}:3306"
      RequiresCompatibilities:
        - FARGATE
  SparkMasterDiscoveryService:
    DependsOn: PrivateNamespace
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for spark master
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: spark-master
      NamespaceId: !Ref PrivateNamespace
  SparkMasterService:
    DependsOn:
      - PrivateNamespace
      - SparkMasterDiscoveryService
      - Cluster
      - SparkMasterTaskDefinition
      - SparkMasterServiceSecurityGroup
    Type: AWS::ECS::Service
    Properties:
      ServiceName: spark-master
      Cluster: !Ref Cluster
      TaskDefinition: !Ref SparkMasterTaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt SparkMasterDiscoveryService.Arn
          Port: 7077
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetID
          SecurityGroups:
            - !GetAtt SparkMasterServiceSecurityGroup.GroupId
  SparkWorkerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - ProcessorsExecutionRole
      - SparkWorkerLogGroup
      - VisualisationsService
    Properties:
      Family: spark-worker-td
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ProcessorsExecutionRole
      ContainerDefinitions:
        - Name: spark-worker-container
          Image: bde2020/spark-worker:3.1.1-hadoop3.2
          PortMappings:
            - ContainerPort: 8081
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref SparkWorkerLogGroup
              awslogs-stream-prefix: ecs
          Environment:
            - Name: SPARK_MASTER
              Value: !Sub "spark://spark-master.${Domain}:7077"
            - Name: KAFKA_SERVICE
              Value: !Sub "kafka.${Domain}:9092"
            - Name: MYSQL_SERVICE
              Value: !Sub "visualisations.${Domain}:3306"
      RequiresCompatibilities:
        - FARGATE
  SparkWorkerService:
    DependsOn:
      - PrivateNamespace
      - Cluster
      - SparkWorkerTaskDefinition
      - SparkWorkerServiceSecurityGroup
    Type: AWS::ECS::Service
    Properties:
      ServiceName: spark-worker
      Cluster: !Ref Cluster
      TaskDefinition: !Ref SparkWorkerTaskDefinition
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetID
          SecurityGroups:
            - !GetAtt SparkWorkerServiceSecurityGroup.GroupId
  VisualisationsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - CollectorsExecutionRole
      - MySQLLogGroup
      - GrafanaLogGroup
    Properties:
      Family: visualisations-td
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref CollectorsExecutionRole
      ContainerDefinitions:
        - Name: mysql-db-container
          Image:  mysql:5.7
          PortMappings:
            - ContainerPort: 3306
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref MySQLLogGroup
              awslogs-stream-prefix: ecs
          Environment:
            - Name: MYSQL_ROOT_PASSWORD
              Value: myRootPassword123
            - Name: MYSQL_DATABASE
              Value: myDb
            - Name: MYSQL_USER
              Value: myDbUser
            - Name: MYSQL_PASSWORD
              Value: myPassword123
        - Name: grafana-container
          Image: grafana/grafana
          PortMappings:
            - ContainerPort: 3000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref GrafanaLogGroup
              awslogs-stream-prefix: ecs
          Environment:
            - Name: GF_INSTALL_PLUGINS
              Value: percona-percona-app
      RequiresCompatibilities:
        - FARGATE
  VisualisationsDiscoveryService:
    DependsOn: PrivateNamespace
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for mysql and grafana
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: visualisations
      NamespaceId: !Ref PrivateNamespace
  VisualisationsService:
    DependsOn:
      - PrivateNamespace
      - Cluster
      - VisualisationsTaskDefinition
      - VisualisationsServiceSecurityGroup
    Type: AWS::ECS::Service
    Properties:
      ServiceName: visualisations
      Cluster: !Ref Cluster
      TaskDefinition: !Ref VisualisationsTaskDefinition
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetID
          SecurityGroups:
            - !GetAtt VisualisationsServiceSecurityGroup.GroupId

  SparkStreamingAppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - ProcessorsExecutionRole
      - SparkStreamingLogGroup
    Properties:
      Family: spark-streaming-app-td
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ProcessorsExecutionRole
      ContainerDefinitions:
        - Name: spark-streaming-app-container
          Image: !Ref SparkStreamingAppEcrImage
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref SparkStreamingLogGroup
              awslogs-stream-prefix: ecs
          Environment:
            - Name: SPARK_MASTER_NAME
              Value: !Sub "spark://spark-master.${Domain}"
            - Name: SPARK_MASTER_PORT
              Value: "7077"
      RequiresCompatibilities:
        - FARGATE

  SparkStreamingAppService:
    DependsOn:
      - PrivateNamespace
      - Cluster
      - SparkStreamingAppTaskDefinition
    Type: AWS::ECS::Service
    Properties:
      ServiceName: spark-streaming-app
      Cluster: !Ref Cluster
      TaskDefinition: !Ref SparkStreamingAppTaskDefinition
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetID

